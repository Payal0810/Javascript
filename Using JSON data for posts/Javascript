let postsData = [
  {
    id: 1,
    author: "John",
    content: "Hello, Instagram!",
    likes: 10,
    comments: ["Great post!", "Nice photo!"],
    image: "https://files.codingninjas.in/image2-28694.jpg",
  },
  {
    id: 2,
    author: "Jane",
    content: "This is a great post!",
    likes: 15,
    comments: [],
    image: "https://files.codingninjas.in/oip-28704.jpg",
  },
  {
    id: 3,
    author: "Alice",
    content: "Another post",
    likes: 8,
    comments: [],
    image: "https://files.codingninjas.in/th-2-28706.jpg",
  },
  {
    id: 4,
    author: "Bob",
    content: "Check out this photo!",
    likes: 20,
    comments: [],
    image: "https://files.codingninjas.in/image1-28708.jpg",
  },
];

// A set to track which posts have been liked
const likedPosts = new Set();

// Function to render posts
function renderPosts() {
  const postsContainer = document.getElementById("posts");
  postsContainer.innerHTML = ""; // Clear the container for re-rendering

  postsData.forEach((post) => {
    const postElement = document.createElement("div");
    postElement.classList.add("post");

    const authorElement = document.createElement("h3");
    authorElement.textContent = post.author;

    const contentElement = document.createElement("p");
    contentElement.textContent = post.content;

    const imageElement = document.createElement("img");
    imageElement.src = post.image;
    imageElement.alt = "Post Image";

    const likeButton = document.createElement("button");
    likeButton.textContent = "Like";
    likeButton.classList.add("like-button");

    // Restore the like button state for liked posts
    if (likedPosts.has(post.id)) {
      likeButton.disabled = true;
      likeButton.style.backgroundColor = "red";
    }

    // Like button click event
    likeButton.addEventListener("click", () => {
      if (!likedPosts.has(post.id)) {
        likedPosts.add(post.id); // Mark post as liked
        likePost(post.id); // Increment likes
        likeButton.style.backgroundColor = "red"; // Update button color immediately
        likeButton.disabled = true; // Disable the button
      }
    });

    const postFooter = document.createElement("div");
    postFooter.classList.add("post-footer");
    postFooter.textContent = `Likes: ${post.likes}   Comments: ${post.comments.length}`;

    // Comment input and button
    const commentSection = document.createElement("div");
    commentSection.classList.add("comment-section");

    const commentInput = document.createElement("input");
    commentInput.type = "text";
    commentInput.placeholder = "Add a comment...";
    commentInput.classList.add("comment-input");

    const commentButton = document.createElement("button");
    commentButton.textContent = "Post";
    commentButton.classList.add("comment-button");

    // Comments container
    const commentsContainer = document.createElement("div");
    commentsContainer.classList.add("comments-container");

    // Display existing comments
    post.comments.forEach((comment) => {
      const commentElement = document.createElement("p");
      commentElement.textContent = comment;
      commentsContainer.appendChild(commentElement);
    });

    // Comment button click event
    commentButton.addEventListener("click", () => {
      const newComment = commentInput.value.trim();
      if (newComment) {
        addComment(post.id, newComment);
        commentInput.value = ""; // Clear the input
      }
    });

    commentSection.appendChild(commentInput);
    commentSection.appendChild(commentButton);

    postElement.appendChild(authorElement);
    postElement.appendChild(imageElement);
    postElement.appendChild(contentElement);
    postElement.appendChild(likeButton);
    postElement.appendChild(postFooter);
    postElement.appendChild(commentSection);
    postElement.appendChild(commentsContainer);

    postsContainer.appendChild(postElement);
  });
}

// Function to handle liking a post
function likePost(postId) {
  const post = postsData.find((p) => p.id === postId);
  if (post) {
    post.likes++; // Increment the like count
    renderPosts(); // Re-render posts
  }
}

// Function to add a comment
function addComment(postId, comment) {
  const post = postsData.find((p) => p.id === postId);
  if (post) {
    post.comments.push(comment); // Add the new comment
    renderPosts(); // Re-render posts
  }
}

// Initial render
renderPosts();
